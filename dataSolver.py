# dataSolver.py
import os
import json
import requests
from typing import Dict
from requests.exceptions import RequestException

class DataSolver:
    def __init__(self, 
                 output_dir: str = "data", 
                 datanode_url: str = "http://localhost:5000/api/agent/run"):
        self.output_dir = output_dir
        self.datanode_url = os.environ.get("DATANODE_URL", datanode_url)
        try:
            if not os.path.exists(output_dir):
                os.makedirs(output_dir)
        except PermissionError:
            raise PermissionError(f"Cannot create output directory '{output_dir}'. Please check permissions or specify a different directory.")
        except Exception as e:
            raise RuntimeError(f"Failed to initialize output directory '{output_dir}': {str(e)}")

    def is_datanode_available(self) -> bool:
        """Check if the Data Node (Two Ligma server) is running by querying its healthcheck endpoint."""
        try:
            response = requests.get(self.datanode_url.replace("/api/agent/run", "/api/healthcheck"), timeout=2)
            response.raise_for_status()
            return response.json().get("status") == "ok"
        except RequestException:
            return False

    def solve_rfd(self, rfd: Dict) -> str:
        """Process an RFD by routing it to the Data Node (Two Ligma server)."""
        rfd_id = rfd["rfd_id"]
        name = rfd["name"]

        if not self.is_datanode_available():
            error_msg = (
                f"Data Node (Two Ligma server) not available at {self.datanode_url}. "
                "Please ensure the Two Ligma server is running and accessible at this URL."
            )
            print(error_msg)
            raise RuntimeError(error_msg)

        # Transform RFD into Two Ligma's AgentChatRequest format
        # We assume the analytics_agent can process synthetic data generation via a tool
        message = {
            "type": "user",
            "message": f"Generate synthetic data for RFD: {json.dumps(rfd)}"
        }
        context = {
            "conversationHistory": [],
            "address": os.environ.get("WALLET_ADDRESS", "mock_address")  # Required by Two Ligma
        }
        payload = {
            "message": message,
            "context": context,
            "agent": "analytics"  # Explicitly target the analytics agent
        }

        try:
            response = requests.post(self.datanode_url, json=payload)
            response.raise_for_status()
            result = response.json()

            # Extract the generated data from the agent's response
            # Assuming the agent returns a JSON string with the dataset in its message
            agent_message = result.get("message", "")
            try:
                full_dataset = json.loads(agent_message)  # Expecting the agent to return the dataset as JSON
                if not isinstance(full_dataset, dict) or "data" not in full_dataset:
                    raise ValueError("Invalid dataset format from Data Node")
            except json.JSONDecodeError:
                raise ValueError(f"Data Node response is not a valid dataset: {agent_message}")

            # Save the dataset locally
            file_path = os.path.join(self.output_dir, f"rfd_{rfd_id}_solution.json")
            with open(file_path, 'w') as f:
                json.dump(full_dataset, f, indent=2)

            print(f"Dataset generated by Data Node (Two Ligma) at: {file_path}")
            return file_path

        except RequestException as e:
            error_msg = (
                f"Failed to connect to Data Node (Two Ligma) at {self.datanode_url}: {str(e)}. "
                "Please ensure the Two Ligma server is running and accessible."
            )
            print(error_msg)
            raise RuntimeError(error_msg) from e
        except Exception as e:
            error_msg = f"Error processing RFD #{rfd_id} with Data Node (Two Ligma): {str(e)}"
            print(error_msg)
            raise RuntimeError(error_msg) from e

if __name__ == "__main__":
    solver = DataSolver()
    print("DataSolver initialized. Use with sample_rfd.json via main.py --test")